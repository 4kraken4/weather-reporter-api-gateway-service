version: '3.8'

services:
  # Weather API Gateway service (production)
  weather-api-gateway-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: weather-api-gateway-service-prod
    ports:
      - '9000:9000'
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=9000
      # Override specific values for Docker production environment
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PROTOCOL=http
      - CACHE_STRATEGY=${CACHE_STRATEGY:-redis}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:9000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - weather-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: weather-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - weather-api-gateway-service
    networks:
      - weather-network
    restart: unless-stopped

  # Redis cache for production
  redis:
    image: redis:7-alpine
    container_name: weather-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - weather-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

networks:
  weather-network:
    driver: bridge

volumes:
  redis_data:
